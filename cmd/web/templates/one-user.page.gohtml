{{template "base" .}}

{{define "title"}}Admin User{{end}}

{{define "content"}}
<h2 class="mt-5">Admin User</h2>
<hr />

<form id="user_form" action="" method="post" name="user_form" class="needs-validation" autocomplete="off" novalidate="">
    <div class="mb-3">
        <label for="first_name" class="form-label">First Name</label>
        <input id="first_name" class="form-control bg-dark text-light" type="text" name="first_name" required=""
            autocomplete="first_name-new">
    </div>
    <div class="mb-3">
        <label for="last_name" class="form-label">Last Name</label>
        <input id="last_name" class="form-control bg-dark text-light" type="text" name="last_name" required=""
            autocomplete="last_name-new">
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <input id="email" class="form-control bg-dark text-light" type="email" name="email" required=""
            autocomplete="email-new">
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input id="password" class="form-control bg-dark text-light" type="password" name="password"
            autocomplete="password-new">
    </div>
    <div class="mb-3">
        <label for="verify-password" class="form-label">Verify Password</label>
        <input id="verify-password" class="form-control bg-dark text-light" type="password" name="verify-password"
            autocomplete="verify-password-new">
    </div>
    <hr />

    <div class="float-start">
        <a id="save-btn" class="btn btn-primary" href="javascript:void(0);" onclick="val()">Save Changes</a>
        <a id="cancel-btn" class="btn btn-warning" href="/admin/all-users">Cancel</a>
    </div>
    <div class="float-end">
        <a id="delete-btn" href="javascript:void(0);" class="btn btn-danger d-none">Delete</a>
    </div>

    <div class="clear-fix"></div>
</form>
{{end}}

{{define "js"}}
<script>
    let token = localStorage.getItem("token")
    let id = window.location.pathname.split("/").pop()
    let deleteBtn = document.getElementById("delete-btn")

    function val() {
        let form = document.getElementById("user_form")
        if (form.checkValidiyy === false) {
            this.event.preventDefault()
            this.event.stopPropagation()
            form.classList.add("was-validated")
            return
        }
        form.classList.add("was-validated")

        if (document.getElementById("password").value !== document.getElementById("verify-password").value) {
            Swal.fire("passwords do not match!")
            return
        }

        let payload = {
            id: parseInt(id, 10),
            first_name: document.getElementById("first_name").value,
            last_name: document.getElementById("last_name").value,
            email: document.getElementById("email").value,
            password: document.getElementById("password").value,
        }

        const requestOptions = {
            method: "post",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": "Bearer " + token,
            },
            body: JSON.stringify(payload)
        }

        fetch("{{.API}}/api/admin/all-users/edit/" + id, requestOptions)
            .then(resp => resp.json())
            .then(data => {
                if (data.error) {
                    Swal.fire("Error: " + data.message)
                } else {
                    location.href = "/admin/all-users"
                }
            })
    }

    document.addEventListener("DOMContentLoaded", () => {

        if (id !== 0) {
            if (id !== "{{.UserID}}") {
                deleteBtn.classList.remove("d-none")
            }

            const requestOptions = {
                method: "post",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + token,
                }
            }

            fetch('{{.API}}/api/admin/all-users/' + id, requestOptions)
                .then(resp => resp.json())
                .then(data => {
                    if (data.id) {
                        document.getElementById("first_name").value = data.first_name
                        document.getElementById("last_name").value = data.last_name
                        document.getElementById("email").value = data.email
                    }
                })
        }
    })

    deleteBtn.addEventListener("click", () => {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to undo this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Delete User'
        }).then((result) => {
            if (result.isConfirmed) {
                const requestOptions = {
                    method: "post",
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/json",
                        "Authorization": "Bearer " + token,
                    }
                }

                fetch("{{.API}}/api/admin/all-users/delete/" + id, requestOptions)
                .then(resp => resp.json())
                .then(data => {
                    if (data.error) {
                        Swal.fire("Error: " + data.message)
                    } else {
                        let jsonData = {
                            action: "deleteUser",
                            user_id: parseInt(id, 10),
                        }

                        socket.send(JSON.stringify(jsonData))
                        
                        location.href = "/admin/all-users"
                    }
                })
            }
        })
    })

</script>
{{end}}